variables:
  GIT_STRATEGY: clone
  APP_NAME: zeno-habit
  IMAGE_TAG: $CI_COMMIT_SHA

stages:
  - configure
  - build
  - package
  - test
  - deploy

configure tags:
  stage: configure
  image: python:3
  rules:
    - when: always
  artifacts:
    expire_in: "1h"
    paths:
      - variables
    when: always
  script:
    - pip install requests
    - WEB_HASH=$(python3 determinetagfrompath.py --modulepath ./zeno-habit-web/)
    - BFF_HASH=$(python3 determinetagfrompath.py --modulepath ./zeno-habit-bff/)
    - API_HASH=$(python3 determinetagfrompath.py --modulepath ./zeno-habit-api/)
    - E2E_HASH=$(python3 determinetagfrompath.py --modulepath ./zeno-habit-e2e/)
    - WEB_BUILD=$(python3 determinetagpresent.py --branch "${CI_COMMIT_BRANCH}" --imagetag "${WEB_HASH}" --imagename zeno-habit-web --crusername "${CR_USERNAME}")
    - BFF_BUILD=$(python3 determinetagpresent.py --branch "${CI_COMMIT_BRANCH}" --imagetag "${BFF_HASH}" --imagename zeno-habit-bff --crusername "${CR_USERNAME}")
    - API_BUILD=$(python3 determinetagpresent.py --branch "${CI_COMMIT_BRANCH}" --imagetag "${API_HASH}" --imagename zeno-habit-api --crusername "${CR_USERNAME}")
    - E2E_BUILD=$(python3 determinetagpresent.py --branch "${CI_COMMIT_BRANCH}" --imagetag "${E2E_HASH}" --imagename zeno-habit-e2e --crusername "${CR_USERNAME}")
    - mkdir -p variables
    - echo $WEB_HASH >> variables/web_image_tag
    - echo $BFF_HASH >> variables/bff_image_tag
    - echo $API_HASH >> variables/api_image_tag
    - echo $E2E_HASH >> variables/e2e_image_tag
    - echo $WEB_BUILD >> variables/web_image_build
    - echo $BFF_BUILD >> variables/bff_image_build
    - echo $API_BUILD >> variables/api_image_build
    - echo $E2E_BUILD >> variables/e2e_image_build
    - cat variables/web_image_tag
    - cat variables/bff_image_tag
    - cat variables/api_image_tag
    - cat variables/e2e_image_tag
    - cat variables/web_image_build
    - cat variables/bff_image_build
    - cat variables/api_image_build
    - cat variables/e2e_image_build

build web:
  stage: build
  image: node:alpine
  needs:
    - job: "configure tags"
  rules:
    - changes:
        - zeno-habit-web/**/*
      when: always
    - when: never
  script:
    - cd zeno-habit-web
    - echo '@mark.davison:registry=https://gitlab.markdavison.kiwi/api/v4/packages/npm/' >> .npmrc
    - npm config set //gitlab.markdavison.kiwi/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}
    - npm ci
    - npm run build
    - npm run lint
    - npm run test:ci
  artifacts:
    when: always
    reports:
      cobertura:
        - ./zeno-habit-web/coverage/cobertura-coverage.xml
      junit:
        - ./zeno-habit-web/junit.xml

build bff:
  stage: build
  image: node:alpine
  needs:
    - job: "configure tags"
  rules:
    - changes:
        - zeno-habit-bff/**/*
      when: always
    - when: never
  script:
    - cd zeno-habit-bff
    - echo '@mark.davison:registry=https://gitlab.markdavison.kiwi/api/v4/packages/npm/' >> .npmrc
    - npm config set //gitlab.markdavison.kiwi/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}
    - npm ci
    - npm run build
    - npm run test:ci
  artifacts:
    when: always
    reports:
      cobertura:
        - ./zeno-habit-bff/coverage/cobertura-coverage.xml
      junit:
        - ./zeno-habit-bff/junit.xml

build api:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:6.0
  needs:
    - job: "configure tags"
  rules:
    - changes:
        - zeno-habit-api/**/*
      when: always
    - when: never
  script:
    - cd zeno-habit-api
    - dotnet restore
    - dotnet test --collect:"XPlat Code Coverage" --results-directory:"artifacts" -l:"trx;LogFileName=test-result.trx"
    - dotnet tool install -g trx2junit
    - export PATH="$PATH:/root/.dotnet/tools"
    - trx2junit ./artifacts/test-result.trx --output ./artifacts

  artifacts:
    when: always
    reports:
      cobertura:
        - ./zeno-habit-api/artifacts/*/coverage.cobertura.xml
      junit:
        - ./zeno-habit-api/artifacts/*test-result.xml

publish web:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  needs:
    - job: "build web"
      optional: true
    - job: "build bff"
      optional: true
    - job: "build api"
      optional: true
    - job: "configure tags"
      optional: false
  rules:
    - changes:
        - zeno-habit-web/**/*
      when: always
    - when: never
  artifacts:
    expire_in: "1h"
    paths:
      - variables
    when: always
  script:
    - export WEB_IMAGE_TAG=`cat variables/web_image_build 2> /dev/null`
    - if [ "$WEB_IMAGE_TAG" == '' ]; then exit 0; fi
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CR_REGISTRY\":{\"auth\":\"$(echo -n ${CR_USERNAME}:${CR_PASSWORD} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context ./zeno-habit-web/ --dockerfile ./zeno-habit-web/Dockerfile --destination "$CR_USERNAME"/zeno-habit-web:$WEB_IMAGE_TAG

publish bff:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.7.0-debug
    entrypoint: [""]
  needs:
    - job: "build web"
      optional: true
    - job: "build bff"
      optional: true
    - job: "build api"
      optional: true
    - job: "configure tags"
      optional: false
  rules:
    - changes:
        - zeno-habit-bff/**/*
      when: always
    - when: never
  artifacts:
    expire_in: "1h"
    paths:
      - variables
    when: always
  script:
    - export BFF_IMAGE_TAG=`cat variables/bff_image_build 2> /dev/null`
    - if [ "$BFF_IMAGE_TAG" == '' ]; then exit 0; fi
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CR_REGISTRY\":{\"auth\":\"$(echo -n ${CR_USERNAME}:${CR_PASSWORD} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --insecure --context ./zeno-habit-bff/ --dockerfile ./zeno-habit-bff/Dockerfile --destination zeno15/zeno-habit-bff:$BFF_IMAGE_TAG

publish api:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.7.0-debug
    entrypoint: [""]
  needs:
    - job: "build web"
      optional: true
    - job: "build bff"
      optional: true
    - job: "build api"
      optional: true
    - job: "configure tags"
      optional: false
  rules:
    - changes:
        - zeno-habit-api/**/*
      when: always
    - when: never
  artifacts:
    expire_in: "1h"
    paths:
      - variables
    when: always
  script:
    - export API_IMAGE_TAG=`cat variables/api_image_build 2> /dev/null`
    - if [ "$API_IMAGE_TAG" == '' ]; then exit 0; fi
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CR_REGISTRY\":{\"auth\":\"$(echo -n ${CR_USERNAME}:${CR_PASSWORD} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --insecure --context ./zeno-habit-api/ --dockerfile ./zeno-habit-api/Dockerfile --destination zeno15/zeno-habit-api:$API_IMAGE_TAG

publish e2e:
  stage: package
  image:
    name: gcr.io/kaniko-project/executor:v1.7.0-debug
    entrypoint: [""]
  needs:
    - job: "build web"
      optional: true
    - job: "build bff"
      optional: true
    - job: "build api"
      optional: true
    - job: "configure tags"
      optional: false
  rules:
    - changes:
        - zeno-habit-e2e/**/*
      when: always
    - when: never
  script:
    - export E2E_IMAGE_TAG=`cat variables/e2e_image_build 2> /dev/null`
    - if [ "$E2E_IMAGE_TAG" == '' ]; then exit 0; fi
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CR_REGISTRY\":{\"auth\":\"$(echo -n ${CR_USERNAME}:${CR_PASSWORD} | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --insecure --context ./zeno-habit-e2e/ --dockerfile ./zeno-habit-e2e/Dockerfile --destination zeno15/zeno-habit-e2e:$E2E_IMAGE_TAG

end to end tests:
  stage: test
  image:
    name: dtzar/helm-kubectl
    entrypoint: [""]
  needs:
    - job: "publish e2e"
      optional: true
    - job: "publish web"
      optional: true
      artifacts: true
    - job: "publish bff"
      optional: true
      artifacts: true
    - job: "publish api"
      optional: true
      artifacts: true
  artifacts:
    expire_in: "1h"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        IMAGE_TAG: "latest"
    - changes:
        - zeno-habit-web/**/*
        - zeno-habit-bff/**/*
        - zeno-habit-api/**/*
        - zeno-habit-e2e/**/*
        - charts/**/*
      when: always
    - when: never
  script:
    - cat variables/web_image_tag
    - cat variables/bff_image_tag
    - cat variables/api_image_tag
    - cat variables/e2e_image_tag
    - cat variables/web_image_build
    - cat variables/bff_image_build
    - cat variables/api_image_build
    - cat variables/e2e_image_build
    - export WEB_IMAGE_TAG=`cat variables/web_image_tag 2> /dev/null || echo latest`
    - export BFF_IMAGE_TAG=`cat variables/bff_image_tag 2> /dev/null || echo latest`
    - export API_IMAGE_TAG=`cat variables/api_image_tag 2> /dev/null || echo latest`
    - export E2E_IMAGE_TAG=`cat variables/e2e_image_tag 2> /dev/null || echo latest`
    - echo $WEB_IMAGE_TAG
    - echo $BFF_IMAGE_TAG
    - echo $API_IMAGE_TAG
    - echo $E2E_IMAGE_TAG
    - envsubst < ./zeno-habit-e2e/e2e-dep.yaml | tee ./zeno-habit-e2e/dep-subst.yaml
    - kubectl delete namespace ${APP_NAME}-dev --ignore-not-found=true --kubeconfig "$KUBE_CONFIG"
    - kubectl create namespace ${APP_NAME}-dev --kubeconfig "$KUBE_CONFIG"
    - kubectl apply -f ./zeno-habit-e2e/zeno-habit-dev-secret.yaml -n ${APP_NAME}-dev --kubeconfig "$KUBE_CONFIG"
    - helm upgrade ${APP_NAME} ./charts --install --atomic --values ./charts/dev-values.yaml --set api.tag="$API_IMAGE_TAG" --set bff.tag="$BFF_IMAGE_TAG" --set web.tag="$WEB_IMAGE_TAG" --namespace ${APP_NAME}-dev --kubeconfig "$KUBE_CONFIG"
    - kubectl wait --for=condition=Ready pods --timeout=600s --all --namespace ${APP_NAME}-dev --kubeconfig "$KUBE_CONFIG"
    - kubectl apply -f ./zeno-habit-e2e/dep-subst.yaml -n ${APP_NAME}-dev --kubeconfig "$KUBE_CONFIG"
    - kubectl wait --for=condition=Ready --timeout=600s pods --all --namespace ${APP_NAME}-dev --kubeconfig "$KUBE_CONFIG"
    - kubectl logs -f job/zeno-habit-e2e-job -n zeno-habit-dev --kubeconfig "$KUBE_CONFIG"
    - kubectl wait --for=condition=Complete --timeout=5s job/zeno-habit-e2e-job -n ${APP_NAME}-dev --kubeconfig "$KUBE_CONFIG"

deploy to production:
  stage: deploy
  image:
    name: alpine/helm:3.2.1
    entrypoint: [""]
  needs:
    - job: "publish web"
      optional: true
    - job: "publish bff"
      optional: true
    - job: "publish api"
      optional: true
    - job: "publish e2e"
      optional: true
    - job: "end to end tests"
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - helm version
    - helm upgrade ${APP_NAME} ./charts --install --atomic --namespace ${APP_NAME} --kubeconfig "$KUBE_CONFIG"
  environment:
    name: "$ENV_NAME"
    url: "$ENV_ADDRESS"
